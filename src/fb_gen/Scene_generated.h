// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCENE_INCEPTION_FB_H_
#define FLATBUFFERS_GENERATED_SCENE_INCEPTION_FB_H_

#include "flatbuffers/flatbuffers.h"

#include "component_generated.h"

namespace inception {
namespace fb {

struct flatbufferEntity;
struct flatbufferEntityBuilder;
struct flatbufferEntityT;

struct flatbufferTreeNode;
struct flatbufferTreeNodeBuilder;
struct flatbufferTreeNodeT;

struct flatbufferScene;
struct flatbufferSceneBuilder;
struct flatbufferSceneT;

bool operator==(const flatbufferEntityT &lhs, const flatbufferEntityT &rhs);
bool operator!=(const flatbufferEntityT &lhs, const flatbufferEntityT &rhs);
bool operator==(const flatbufferTreeNodeT &lhs, const flatbufferTreeNodeT &rhs);
bool operator!=(const flatbufferTreeNodeT &lhs, const flatbufferTreeNodeT &rhs);
bool operator==(const flatbufferSceneT &lhs, const flatbufferSceneT &rhs);
bool operator!=(const flatbufferSceneT &lhs, const flatbufferSceneT &rhs);

inline const flatbuffers::TypeTable *flatbufferEntityTypeTable();

inline const flatbuffers::TypeTable *flatbufferTreeNodeTypeTable();

inline const flatbuffers::TypeTable *flatbufferSceneTypeTable();

struct flatbufferEntityT {
  typedef flatbufferEntity TableType;
  std::vector<--filename-suffix<inception::fb::icpEntityDataComponentT>> m_components{};
  flatbufferEntityT() = default;
  flatbufferEntityT(const flatbufferEntityT &o);
  flatbufferEntityT(flatbufferEntityT&&) FLATBUFFERS_NOEXCEPT = default;
  flatbufferEntityT &operator=(flatbufferEntityT o) FLATBUFFERS_NOEXCEPT;
};

struct flatbufferEntity FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef flatbufferEntityT NativeTableType;
  typedef flatbufferEntityBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return flatbufferEntityTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_M_COMPONENTS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<inception::fb::icpEntityDataComponent>> *m_components() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<inception::fb::icpEntityDataComponent>> *>(VT_M_COMPONENTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_M_COMPONENTS) &&
           verifier.VerifyVector(m_components()) &&
           verifier.VerifyVectorOfTables(m_components()) &&
           verifier.EndTable();
  }
  flatbufferEntityT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(flatbufferEntityT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<flatbufferEntity> Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbufferEntityT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct flatbufferEntityBuilder {
  typedef flatbufferEntity Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_m_components(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<inception::fb::icpEntityDataComponent>>> m_components) {
    fbb_.AddOffset(flatbufferEntity::VT_M_COMPONENTS, m_components);
  }
  explicit flatbufferEntityBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<flatbufferEntity> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<flatbufferEntity>(end);
    return o;
  }
};

inline flatbuffers::Offset<flatbufferEntity> CreateflatbufferEntity(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<inception::fb::icpEntityDataComponent>>> m_components = 0) {
  flatbufferEntityBuilder builder_(_fbb);
  builder_.add_m_components(m_components);
  return builder_.Finish();
}

inline flatbuffers::Offset<flatbufferEntity> CreateflatbufferEntityDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<inception::fb::icpEntityDataComponent>> *m_components = nullptr) {
  auto m_components__ = m_components ? _fbb.CreateVector<flatbuffers::Offset<inception::fb::icpEntityDataComponent>>(*m_components) : 0;
  return inception::fb::CreateflatbufferEntity(
      _fbb,
      m_components__);
}

flatbuffers::Offset<flatbufferEntity> PackflatbufferEntity(flatbuffers::FlatBufferBuilder &_fbb, const flatbufferEntityT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct flatbufferTreeNodeT {
  typedef flatbufferTreeNode TableType;
  --filename-suffix<inception::fb::flatbufferEntityT> m_entity{};
  std::vector<--filename-suffix<inception::fb::flatbufferEntityT>> m_children{};
  flatbufferTreeNodeT() = default;
  flatbufferTreeNodeT(const flatbufferTreeNodeT &o);
  flatbufferTreeNodeT(flatbufferTreeNodeT&&) FLATBUFFERS_NOEXCEPT = default;
  flatbufferTreeNodeT &operator=(flatbufferTreeNodeT o) FLATBUFFERS_NOEXCEPT;
};

struct flatbufferTreeNode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef flatbufferTreeNodeT NativeTableType;
  typedef flatbufferTreeNodeBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return flatbufferTreeNodeTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_M_ENTITY = 4,
    VT_M_CHILDREN = 6
  };
  const inception::fb::flatbufferEntity *m_entity() const {
    return GetPointer<const inception::fb::flatbufferEntity *>(VT_M_ENTITY);
  }
  const flatbuffers::Vector<flatbuffers::Offset<inception::fb::flatbufferEntity>> *m_children() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<inception::fb::flatbufferEntity>> *>(VT_M_CHILDREN);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_M_ENTITY) &&
           verifier.VerifyTable(m_entity()) &&
           VerifyOffset(verifier, VT_M_CHILDREN) &&
           verifier.VerifyVector(m_children()) &&
           verifier.VerifyVectorOfTables(m_children()) &&
           verifier.EndTable();
  }
  flatbufferTreeNodeT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(flatbufferTreeNodeT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<flatbufferTreeNode> Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbufferTreeNodeT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct flatbufferTreeNodeBuilder {
  typedef flatbufferTreeNode Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_m_entity(flatbuffers::Offset<inception::fb::flatbufferEntity> m_entity) {
    fbb_.AddOffset(flatbufferTreeNode::VT_M_ENTITY, m_entity);
  }
  void add_m_children(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<inception::fb::flatbufferEntity>>> m_children) {
    fbb_.AddOffset(flatbufferTreeNode::VT_M_CHILDREN, m_children);
  }
  explicit flatbufferTreeNodeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<flatbufferTreeNode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<flatbufferTreeNode>(end);
    return o;
  }
};

inline flatbuffers::Offset<flatbufferTreeNode> CreateflatbufferTreeNode(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<inception::fb::flatbufferEntity> m_entity = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<inception::fb::flatbufferEntity>>> m_children = 0) {
  flatbufferTreeNodeBuilder builder_(_fbb);
  builder_.add_m_children(m_children);
  builder_.add_m_entity(m_entity);
  return builder_.Finish();
}

inline flatbuffers::Offset<flatbufferTreeNode> CreateflatbufferTreeNodeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<inception::fb::flatbufferEntity> m_entity = 0,
    const std::vector<flatbuffers::Offset<inception::fb::flatbufferEntity>> *m_children = nullptr) {
  auto m_children__ = m_children ? _fbb.CreateVector<flatbuffers::Offset<inception::fb::flatbufferEntity>>(*m_children) : 0;
  return inception::fb::CreateflatbufferTreeNode(
      _fbb,
      m_entity,
      m_children__);
}

flatbuffers::Offset<flatbufferTreeNode> PackflatbufferTreeNode(flatbuffers::FlatBufferBuilder &_fbb, const flatbufferTreeNodeT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct flatbufferSceneT {
  typedef flatbufferScene TableType;
  std::string m_name{};
  --filename-suffix<inception::fb::flatbufferTreeNodeT> m_sceneRoot{};
  flatbufferSceneT() = default;
  flatbufferSceneT(const flatbufferSceneT &o);
  flatbufferSceneT(flatbufferSceneT&&) FLATBUFFERS_NOEXCEPT = default;
  flatbufferSceneT &operator=(flatbufferSceneT o) FLATBUFFERS_NOEXCEPT;
};

struct flatbufferScene FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef flatbufferSceneT NativeTableType;
  typedef flatbufferSceneBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return flatbufferSceneTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_M_NAME = 4,
    VT_M_SCENEROOT = 6
  };
  const flatbuffers::String *m_name() const {
    return GetPointer<const flatbuffers::String *>(VT_M_NAME);
  }
  const inception::fb::flatbufferTreeNode *m_sceneRoot() const {
    return GetPointer<const inception::fb::flatbufferTreeNode *>(VT_M_SCENEROOT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_M_NAME) &&
           verifier.VerifyString(m_name()) &&
           VerifyOffset(verifier, VT_M_SCENEROOT) &&
           verifier.VerifyTable(m_sceneRoot()) &&
           verifier.EndTable();
  }
  flatbufferSceneT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(flatbufferSceneT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<flatbufferScene> Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbufferSceneT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct flatbufferSceneBuilder {
  typedef flatbufferScene Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_m_name(flatbuffers::Offset<flatbuffers::String> m_name) {
    fbb_.AddOffset(flatbufferScene::VT_M_NAME, m_name);
  }
  void add_m_sceneRoot(flatbuffers::Offset<inception::fb::flatbufferTreeNode> m_sceneRoot) {
    fbb_.AddOffset(flatbufferScene::VT_M_SCENEROOT, m_sceneRoot);
  }
  explicit flatbufferSceneBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<flatbufferScene> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<flatbufferScene>(end);
    return o;
  }
};

inline flatbuffers::Offset<flatbufferScene> CreateflatbufferScene(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> m_name = 0,
    flatbuffers::Offset<inception::fb::flatbufferTreeNode> m_sceneRoot = 0) {
  flatbufferSceneBuilder builder_(_fbb);
  builder_.add_m_sceneRoot(m_sceneRoot);
  builder_.add_m_name(m_name);
  return builder_.Finish();
}

inline flatbuffers::Offset<flatbufferScene> CreateflatbufferSceneDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *m_name = nullptr,
    flatbuffers::Offset<inception::fb::flatbufferTreeNode> m_sceneRoot = 0) {
  auto m_name__ = m_name ? _fbb.CreateString(m_name) : 0;
  return inception::fb::CreateflatbufferScene(
      _fbb,
      m_name__,
      m_sceneRoot);
}

flatbuffers::Offset<flatbufferScene> PackflatbufferScene(flatbuffers::FlatBufferBuilder &_fbb, const flatbufferSceneT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);


inline bool operator==(const flatbufferEntityT &lhs, const flatbufferEntityT &rhs) {
  return
      (lhs.m_components == rhs.m_components);
}

inline bool operator!=(const flatbufferEntityT &lhs, const flatbufferEntityT &rhs) {
    return !(lhs == rhs);
}


inline flatbufferEntityT::flatbufferEntityT(const flatbufferEntityT &o) {
  m_components.reserve(o.m_components.size());
  for (const auto &v : o.m_components) { m_components.emplace_back((v) ? new inception::fb::icpEntityDataComponentT(*v) : nullptr); }
}

inline flatbufferEntityT &flatbufferEntityT::operator=(flatbufferEntityT o) FLATBUFFERS_NOEXCEPT {
  std::swap(m_components, o.m_components);
  return *this;
}

inline flatbufferEntityT *flatbufferEntity::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<flatbufferEntityT>(new flatbufferEntityT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void flatbufferEntity::UnPackTo(flatbufferEntityT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = m_components(); if (_e) { _o->m_components.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->m_components[_i]) { _e->Get(_i)->UnPackTo(_o->m_components[_i].get(), _resolver); } else { _o->m_components[_i] = --filename-suffix<inception::fb::icpEntityDataComponentT>(_e->Get(_i)->UnPack(_resolver)); }; } } }
}

inline flatbuffers::Offset<flatbufferEntity> flatbufferEntity::Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbufferEntityT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return PackflatbufferEntity(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<flatbufferEntity> PackflatbufferEntity(flatbuffers::FlatBufferBuilder &_fbb, const flatbufferEntityT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const flatbufferEntityT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _m_components = _o->m_components.size() ? _fbb.CreateVector<flatbuffers::Offset<inception::fb::icpEntityDataComponent>> (_o->m_components.size(), [](size_t i, _VectorArgs *__va) { return PackicpEntityDataComponent(*__va->__fbb, __va->__o->m_components[i].get(), __va->__rehasher); }, &_va ) : 0;
  return inception::fb::CreateflatbufferEntity(
      _fbb,
      _m_components);
}


inline bool operator==(const flatbufferTreeNodeT &lhs, const flatbufferTreeNodeT &rhs) {
  return
      ((lhs.m_entity == rhs.m_entity) || (lhs.m_entity && rhs.m_entity && *lhs.m_entity == *rhs.m_entity)) &&
      (lhs.m_children == rhs.m_children);
}

inline bool operator!=(const flatbufferTreeNodeT &lhs, const flatbufferTreeNodeT &rhs) {
    return !(lhs == rhs);
}


inline flatbufferTreeNodeT::flatbufferTreeNodeT(const flatbufferTreeNodeT &o)
      : m_entity((o.m_entity) ? new inception::fb::flatbufferEntityT(*o.m_entity) : nullptr) {
  m_children.reserve(o.m_children.size());
  for (const auto &v : o.m_children) { m_children.emplace_back((v) ? new inception::fb::flatbufferEntityT(*v) : nullptr); }
}

inline flatbufferTreeNodeT &flatbufferTreeNodeT::operator=(flatbufferTreeNodeT o) FLATBUFFERS_NOEXCEPT {
  std::swap(m_entity, o.m_entity);
  std::swap(m_children, o.m_children);
  return *this;
}

inline flatbufferTreeNodeT *flatbufferTreeNode::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<flatbufferTreeNodeT>(new flatbufferTreeNodeT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void flatbufferTreeNode::UnPackTo(flatbufferTreeNodeT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = m_entity(); if (_e) { if(_o->m_entity) { _e->UnPackTo(_o->m_entity.get(), _resolver); } else { _o->m_entity = --filename-suffix<inception::fb::flatbufferEntityT>(_e->UnPack(_resolver)); } } }
  { auto _e = m_children(); if (_e) { _o->m_children.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->m_children[_i]) { _e->Get(_i)->UnPackTo(_o->m_children[_i].get(), _resolver); } else { _o->m_children[_i] = --filename-suffix<inception::fb::flatbufferEntityT>(_e->Get(_i)->UnPack(_resolver)); }; } } }
}

inline flatbuffers::Offset<flatbufferTreeNode> flatbufferTreeNode::Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbufferTreeNodeT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return PackflatbufferTreeNode(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<flatbufferTreeNode> PackflatbufferTreeNode(flatbuffers::FlatBufferBuilder &_fbb, const flatbufferTreeNodeT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const flatbufferTreeNodeT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _m_entity = _o->m_entity ? PackflatbufferEntity(_fbb, _o->m_entity.get(), _rehasher) : 0;
  auto _m_children = _o->m_children.size() ? _fbb.CreateVector<flatbuffers::Offset<inception::fb::flatbufferEntity>> (_o->m_children.size(), [](size_t i, _VectorArgs *__va) { return PackflatbufferEntity(*__va->__fbb, __va->__o->m_children[i].get(), __va->__rehasher); }, &_va ) : 0;
  return inception::fb::CreateflatbufferTreeNode(
      _fbb,
      _m_entity,
      _m_children);
}


inline bool operator==(const flatbufferSceneT &lhs, const flatbufferSceneT &rhs) {
  return
      (lhs.m_name == rhs.m_name) &&
      ((lhs.m_sceneRoot == rhs.m_sceneRoot) || (lhs.m_sceneRoot && rhs.m_sceneRoot && *lhs.m_sceneRoot == *rhs.m_sceneRoot));
}

inline bool operator!=(const flatbufferSceneT &lhs, const flatbufferSceneT &rhs) {
    return !(lhs == rhs);
}


inline flatbufferSceneT::flatbufferSceneT(const flatbufferSceneT &o)
      : m_name(o.m_name),
        m_sceneRoot((o.m_sceneRoot) ? new inception::fb::flatbufferTreeNodeT(*o.m_sceneRoot) : nullptr) {
}

inline flatbufferSceneT &flatbufferSceneT::operator=(flatbufferSceneT o) FLATBUFFERS_NOEXCEPT {
  std::swap(m_name, o.m_name);
  std::swap(m_sceneRoot, o.m_sceneRoot);
  return *this;
}

inline flatbufferSceneT *flatbufferScene::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<flatbufferSceneT>(new flatbufferSceneT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void flatbufferScene::UnPackTo(flatbufferSceneT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = m_name(); if (_e) _o->m_name = _e->str(); }
  { auto _e = m_sceneRoot(); if (_e) { if(_o->m_sceneRoot) { _e->UnPackTo(_o->m_sceneRoot.get(), _resolver); } else { _o->m_sceneRoot = --filename-suffix<inception::fb::flatbufferTreeNodeT>(_e->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<flatbufferScene> flatbufferScene::Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbufferSceneT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return PackflatbufferScene(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<flatbufferScene> PackflatbufferScene(flatbuffers::FlatBufferBuilder &_fbb, const flatbufferSceneT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const flatbufferSceneT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _m_name = _o->m_name.empty() ? 0 : _fbb.CreateString(_o->m_name);
  auto _m_sceneRoot = _o->m_sceneRoot ? PackflatbufferTreeNode(_fbb, _o->m_sceneRoot.get(), _rehasher) : 0;
  return inception::fb::CreateflatbufferScene(
      _fbb,
      _m_name,
      _m_sceneRoot);
}

inline const flatbuffers::TypeTable *flatbufferEntityTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 1, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    inception::fb::icpEntityDataComponentTypeTable
  };
  static const char * const names[] = {
    "m_components"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *flatbufferTreeNodeTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 1, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    inception::fb::flatbufferEntityTypeTable
  };
  static const char * const names[] = {
    "m_entity",
    "m_children"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 2, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *flatbufferSceneTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    inception::fb::flatbufferTreeNodeTypeTable
  };
  static const char * const names[] = {
    "m_name",
    "m_sceneRoot"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 2, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace fb
}  // namespace inception

#endif  // FLATBUFFERS_GENERATED_SCENE_INCEPTION_FB_H_
